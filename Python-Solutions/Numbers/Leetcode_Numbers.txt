
<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->

# QUESTIOIN NO : 9. Palindrome Number
class Solution:
    def isPalindrome(self, x: int) -> bool:
        if x < 0:
            return False
        
        num, temp = 0, x
        
        while temp != 0:
            num = num * 10 + temp % 10
            temp //= 10
        
        return num == x



Let's break down the code step by step:

1. **Defining the Class and Method:**
   
    ```python
    class Solution:
        def isPalindrome(self, x: int) -> bool:
    ```

    Here, a class named `Solution` is defined with a method `isPalindrome`. The method takes an integer `x` as its input parameter and returns a boolean value indicating whether `x` is a palindrome or not.

2. **Checking for Negative Numbers:**

    ```python
    if x < 0:
        return False
    ```
   
    The method starts by checking if the input integer `x` is negative. If `x` is negative, it's impossible for a negative number to be a palindrome, so the method immediately returns `False`.

3. **Palindrome Check Algorithm:**

    ```python
    num, temp = 0, x
    
    while temp != 0:
        num = num * 10 + temp % 10
        temp //= 10
    ```
   
    If the input integer `x` is non-negative, the method proceeds to check whether it's a palindrome. This is done by reversing the digits of `x` and comparing the reversed number with the original `x`.

    - Two variables, `num` and `temp`, are initialized to 0 and `x`, respectively. `num` will store the reversed number, and `temp` will be used for calculations.
    - In the `while` loop, the code iterates until `temp` becomes 0. In each iteration:
        - The last digit of `temp` (obtained using `temp % 10`) is added to the reversed number `num` after shifting the existing digits to the left (multiplied by 10).
        - The last digit is removed from `temp` by performing an integer division (`temp //= 10`).
   
    This loop effectively reverses the digits of the original number `x` and stores the reversed number in `num`.

4. **Palindrome Comparison:**

    ```python
    return num == x
    ```
   
    After the loop, the reversed number is stored in `num`. Now, the method compares `num` with the original number `x`. If they are equal, it means that the input integer `x` is a palindrome, and the method returns `True`. If they are not equal, `x` is not a palindrome, and the method returns `False`.


<----------------------------------------------------------------------------------------------------------------------------------------------------------------------->



# QUESTIOIN NO : 326. Power of Three

#Mehthods 1:

```python
class Solution:
    def isPowerOfThree(self, n: int) -> bool:
```

This code defines a class named `Solution` with a method called `isPowerOfThree`. The method takes an integer `n` as an argument and returns a boolean value (`True` or `False`). The goal is to determine whether the given number `n` is a power of three.

```python
        if n <= 0:
            return False
```

This line checks if `n` is less than or equal to 0. If `n` is not a positive integer (i.e., it's zero or negative), the function returns `False` because only positive integers can be powers of three. If `n` is greater than 0, the code proceeds.

```python
        while n % 3 == 0:
            n //= 3
```

This part of the code enters a `while` loop. It continues as long as `n` is divisible by 3 without leaving a remainder. In other words, it keeps dividing `n` by 3 until it's no longer divisible by 3. This is a crucial step in determining if `n` is a power of three. If `n` is a power of three, it can be fully divided by 3 multiple times until it reaches 1.

```python
        return n == 1
```

After the `while` loop, the code checks if the final value of `n` is equal to 1. If `n` was originally a power of three, this condition will be `True` because it means `n` has been fully divided by 3 and reduced to 1. In this case, the function returns `True`, indicating that the input number is indeed a power of three. If `n` is not a power of three, the final value of `n` will not be 1, and the function returns `False`.

In summary, this code uses a loop to repeatedly divide the input number `n` by 3 until it's no longer divisible, and then checks if the final result is equal to 1. If it is, the function returns `True`, indicating that `n` is a power of three; otherwise, it returns `False`.

#Mehthods 2:

Certainly, let's break down the code step by step:

```python
import math

class Solution:
    def isPowerOfThree(self, n: int) -> bool:
```

This code imports the `math` module and defines a class named `Solution` with a method called `isPowerOfThree`. The method takes an integer `n` as an argument and returns a boolean value (`True` or `False`). The goal is to determine whether the given number `n` is a power of three.

```python
        if n <= 0:
            return False
```

This line checks if `n` is less than or equal to 0. If `n` is not a positive integer (i.e., it's zero or negative), the function returns `False` because only positive integers can be powers of three. If `n` is greater than 0, the code proceeds.

```python
        power = int(round(math.log(n, 3)))
```

In this line, the code calculates the logarithm of `n` with base 3 using the `math.log` function. This operation essentially finds the exponent to which 3 must be raised to get `n`. The result is a floating-point number, but it's converted to an integer using `int(round(...))` to ensure it's an integer value.

```python
        return 3 ** power == n
```

Finally, the code checks if 3 raised to the power of `power` (calculated earlier) is equal to the original number `n`. If they are equal, the function returns `True`, indicating that `n` is indeed a power of three. If they are not equal, the function returns `False`.

In summary, this code uses the logarithm to calculate the exponent to which 3 must be raised to get `n`, and then checks if 3 raised to that exponent equals `n`. If they are equal, it returns `True`, indicating that `n` is a power of three; otherwise, it returns `False`.

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------->



# 1103. Distribute Candies to People

# Mehtods 1:

```python
class Solution:
    def distributeCandies(self, candies: int, num_people: int) -> List[int]:
```

This code defines a class `Solution` with a method `distributeCandies` that takes two parameters: `candies`, representing the total number of candies to be distributed, and `num_people`, representing the number of people (recipients). The method returns a list of integers representing the distribution of candies among the people.

```python
        arr = [0 for i in range(num_people)]
```

Here, an array `arr` is initialized with `num_people` elements, all set to 0. This array will be used to store the distribution of candies among the people.

```python
        i = 0
        j = 1
```

Two variables, `i` and `j`, are initialized. `i` represents the index of the current person (starting at 0), and `j` represents the number of candies to be given to the current person (starting at 1).

```python
        while candies > 0:
```

This `while` loop continues as long as there are still candies to distribute.

```python
            if i == len(arr):
                i = 0
```

This conditional statement checks if the index `i` has reached the end of the `arr` array. If it has, it resets `i` to 0, ensuring that the distribution continues in a circular fashion among the people.

```python
            if candies >= j:
                arr[i] += j
                candies -= j
                j += 1
            else:
                arr[i] += candies
                break
```

Inside the loop, there are two conditional branches:
- If there are enough candies (`candies >= j`), it adds `j` candies to the `i`-th person's distribution in `arr`, subtracts `j` from `candies`, and increments `j` by 1. This simulates the distribution process described in the problem statement.
- If there are fewer candies than `j`, it adds the remaining `candies` to the `i`-th person's distribution and breaks out of the loop, indicating that all candies have been distributed.

```python
            i += 1
```

After distributing candies to the current person, `i` is incremented to move to the next person in a circular manner.

```python
        return arr
```

Finally, when all the candies have been distributed, the method returns the `arr` array, which contains the final distribution of candies among the people.



# Mehtods 2:
```python
def distributeCandies(candies, num_people):
```

This line defines a Python function named `distributeCandies` that takes two parameters: `candies`, representing the total number of candies to be distributed, and `num_people`, representing the number of people (recipients).

```python
    result = [0] * num_people
```

Here, we initialize a list called `result` with `num_people` elements, all initialized to 0. This list will be used to store the distribution of candies among the people.

```python
    i = 0
    give = 1
```

We initialize two variables, `i` and `give`. `i` represents the index of the current person (starting with the first person at index 0), and `give` represents the number of candies to give to the current person (starting with 1).

```python
    while candies > 0:
```

This starts a `while` loop that continues as long as there are still candies to distribute.

```python
        candies_given = min(give, candies)
```

In each iteration of the loop, we calculate the number of candies to give to the current person (`candies_given`). We use `min(give, candies)` to ensure that we don't give more candies than are available.

```python
        result[i] += candies_given
```

We add the `candies_given` to the `i`-th person's distribution in the `result` list. This represents giving candies to the current person.

```python
        candies -= candies_given
```

We subtract the `candies_given` from the total `candies` to keep track of how many candies are left to distribute.

```python
        i = (i + 1) % num_people
```

We update the `i` variable to move to the next person in a circular fashion. The `%` operator ensures that `i` wraps around to 0 when it reaches `num_people`.

```python
        give += 1
```

We increment the `give` variable to prepare for the next iteration, where we will give one more candy than in the previous iteration.

```python
    return result
```

Finally, when all the candies have been distributed, we return the `result` list, which contains the final distribution of candies among the people.

The code simulates the described distribution process, and the result is an array representing how many candies each person received in the end.

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------->


# Question No: 2769. Find the Maximum Achievable Number

class Solution:
    def theMaximumAchievableX(self, num: int, t: int) -> int:
        return  num + 2*t 
 1.return a sum of two times of t varible

 <----------------------------------------------------------------------------------------------------------------------------------------------------------------------->

# Question No: 2652. Sum Multiples

1.The loop should run up to n (inclusive), so I changed range(1, n) to range(1, n + 1)
2.Each condition i % 3 == 0, i % 5 == 0, and i % 7 == 0 should be checked separately with == 0 to determine divisibility by 3, 5, and 7. Using or between them correctly checks for divisibility by any of these numbers.
3.return the sum of the conditon statisfied numbers sum
 <----------------------------------------------------------------------------------------------------------------------------------------------------------------------->

# Question No: 204. Count Primes
 # method 1

 Certainly, let's break down the code step by step:

```python
class Solution:
    def countPrimes(self, n: int) -> int:
        if n < 2:
            return 0
        primes = [1] * n
        primes[0] = 0
        primes[1] = 0
        i = 2 
        while i < n:
            temp = i
            if primes[i]:
                temp += i
                while temp < n:
                    primes[temp] = 0
                    temp += i
            i = i + 1
        return sum(primes)
```

This code defines a Python class `Solution` with a method `countPrimes` that takes an integer `n` as input and returns the count of prime numbers less than `n`. Let's go through it step by step:

1. **Input Validation**: The function starts by checking if `n` is less than 2. If `n` is less than 2, it immediately returns 0 because there are no prime numbers less than 2.

2. **Prime Number List Initialization**: An array `primes` of length `n` is created, initially filled with 1's. This array is used to keep track of prime numbers. The element at index `i` will be 1 if `i` is a prime number and 0 otherwise. The first two elements, `primes[0]` and `primes[1]`, are set to 0 because 0 and 1 are not prime numbers.

3. **Loop Through Numbers**: The code uses a `while` loop with a variable `i` starting at 2 (the first prime number).

4. **Sieve of Eratosthenes**: The algorithm being used here is a variation of the Sieve of Eratosthenes. For each prime number `i` found (where `primes[i]` is 1), it marks all multiples of `i` as non-prime by setting `primes[temp]` to 0, where `temp` is incremented by `i`. This step effectively eliminates non-prime numbers from consideration.

5. **Loop Increment**: After marking the multiples of `i`, `i` is incremented by 1, and the process continues until `i` reaches `n`.

6. **Counting Primes**: Finally, the function returns the sum of the `primes` array, which gives the count of prime numbers less than `n`.

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------->

# Question No : 2843. Count Symmetric Integers

Certainly! Let's break down the code step by step:

```python
class Solution:
    def countSymmetricIntegers(self, low: int, high: int) -> int:
```

This code defines a class `Solution` with a method `countSymmetricIntegers` that takes two integer arguments, `low` and `high`, and returns an integer.

```python
        def get_digit_sum(num_str):
            return sum(int(digit) for digit in num_str)
```

Here, we define a helper function `get_digit_sum`. This function takes a string `num_str` as input and calculates the sum of its digits. It converts each digit to an integer using `int(digit)` and then uses the `sum` function to add them up.

```python
        count = 0
```

We initialize a variable `count` to keep track of the number of symmetric integers found.

```python
        for num in range(low, high + 1):
```

We use a `for` loop to iterate through a range of numbers from `low` to `high`, inclusive. This loop will consider each number in the specified range.

```python
            num_str = str(num)
```

For each number `num`, we convert it to a string `num_str`. This allows us to work with its digits individually.

```python
            num_len = len(num_str)
```

We calculate the length of the string representation of the number `num` and store it in the variable `num_len`. This is used to check if the number has an even or odd number of digits.

```python
            if num_len % 2 == 0:
```

We use the modulo operator `%` to check if `num_len` is even. If it's even, we proceed to check if the number is symmetric.

```python
                first_half = num_str[:num_len // 2]
                second_half = num_str[num_len // 2:]
```

For even-length numbers, we split the string `num_str` into two halves: `first_half` and `second_half`. This division allows us to calculate the sum of the first half of digits and the sum of the second half of digits separately.

```python
                if get_digit_sum(first_half) == get_digit_sum(second_half):
```

We call the `get_digit_sum` function on both `first_half` and `second_half` to calculate their respective digit sums. Then, we compare these two sums to check if they are equal.

```python
                    count += 1
```

If the sums of the first and second halves are equal, it means the number is symmetric. In that case, we increment the `count` variable by 1 to keep track of the number of symmetric integers found.

```python
        return count
```

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------->

# Question No :2469. Convert the Temperature

class Solution:
    def convertTemperature(self, celsius: float) -> List[float]:
        return [celsius + 273.15,celsius * 1.80 + 32.00]

1.return the list , the list contain two indexes [kelvin, fahrenheit].
2.Kelvin = Celsius + 273.15 , Fahrenheit = Celsius * 1.80 + 32.00

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------->

# Question No : 2413. Smallest Even Multiple
class Solution:
    def smallestEvenMultiple(self, n: int) -> int:
        return n if n % 2 == 0 else n * 2
1. return n if multiple of 2 is n other wise return the multiple of 2

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------->

# Question No : 2894. Divisible and Non-divisible Sums Difference

class Solution:
    def differenceOfSums(self, n: int, m: int) -> int:
        num1 = 0
        num2 = 0
        for i in range(1,n+1):
            if i % m == 0:
                num2 += i
            else:
                num1 += i
        return num1 - num2 

1.initialize num1 and num2 as 0
2.for loop used to iterate the 1 to n+1 range
3.condition check i is divisbel by m or not if true add that i value to num2 else add num1 variable
4.final return num1-num2

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------->
# Question No : 2119. A Number After a Double Reversal

#Method : 1
class Solution:
    def isSameAfterReversals(self, num: int) -> bool:
        def reverse_integer(n):
            return int(str(n)[::-1])

        reversed1 = reverse_integer(num)
        reversed2 = reverse_integer(reversed1)

        return reversed2 == num

1.declare a funciton for rverse the given num and return num
2.then create two reversed1 and reversed2 varilables for calling the reverse funtion two times
3.return True or flase reversed2 == num 

#Method : 2
class Solution:
    def isSameAfterReversals(self, num: int) -> bool:
         if len(str(num)) > 1 and str(num)[-1] =='0':
             return False
         return True

1.check condition length of the str(num) > 1 and the last nums values equal to '0'
2.return false condition true else return True

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------->
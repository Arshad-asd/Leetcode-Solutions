
                                                                 #LINKED LISTS QUESTIONS SOLVED
<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->
# QUESTION NO: 23. Merge k Sorted Lists

```python
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next
```

Here, you're defining the `ListNode` class which represents a node in a singly-linked list. Each node contains a `val` (value) and a `next` pointer to the next node in the list.

```python
class Solution:
    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:
        if not lists:
            return None
```

In the `Solution` class, you're defining the `mergeKLists` method which takes a list of linked-lists (`lists`) as input. If the input list is empty (`not lists`), you return `None` because there are no linked-lists to merge.

```python
        interval = 1
        while interval < len(lists):
            for i in range(0, len(lists) - interval, interval * 2):
                lists[i] = self.merge(lists[i], lists[i + interval])

            interval *= 2

        return lists[0]
```

In this part, you're implementing a bottom-up merge sort approach. The `interval` starts with 1 and doubles in each iteration. The outer loop controls the intervals, and the inner loop iterates through the lists with the specified interval to merge pairs of linked-lists.

Inside the inner loop, you're using the `merge` method to merge two linked-lists `lists[i]` and `lists[i + interval]`. The merged result is stored in `lists[i]`.

The interval is doubled in each iteration until it reaches or exceeds the length of the `lists` array. Finally, the merged result is available at `lists[0]`, which is the fully merged linked-list.

```python
    def merge(self, l1, l2):
        if not l1:
            return l2
        elif not l2:
            return l1
        else:
            if l1.val <= l2.val:
                l1.next = self.merge(l1.next, l2)
                return l1
            else:
                l2.next = self.merge(l1, l2.next)
                return l2
```

The `merge` method is a recursive function that merges two linked-lists `l1` and `l2` while maintaining the sorting order. If either `l1` or `l2` is `None`, you simply return the other list because there's nothing to merge.

If both lists have elements, you compare their values. If `l1.val` is less than or equal to `l2.val`, you attach `l1` to the merged list and recursively merge `l1.next` with `l2`.

If `l1.val` is greater than `l2.val`, you attach `l2` to the merged list and recursively merge `l1` with `l2.next`.

The recursive approach ensures that elements are merged in the correct order, resulting in a single sorted linked-list.

Overall, this implementation efficiently merges k sorted linked-lists using the merge sort algorithm. The `merge` method recursively combines two sorted lists, and the `mergeKLists` method applies the bottom-up merge sort technique to merge all k linked-lists.

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->

# QUESTION NO: 237. Delete Node in a Linked List

```python
class Solution:
    def deleteNode(self, node):
        node.val = node.next.val  # Copy the value of the next node to the current node
        node.next = node.next.next  # Update the next pointer to skip the next node
        return
```

When you want to delete a node from the linked list, you copy the value of the next node to the current node and then adjust the next pointer to skip the next node. This effectively removes the node from the list while maintaining the correct linkage between the surrounding nodes.

Your implementation follows this logic and should work as expected to delete a node in a singly-linked list.

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->

# QUESTION NO: 203. Remove Linked List Elements

```python
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next
```

- This code defines a simple `ListNode` class representing a node in a singly-linked list. Each node has two attributes: `val` to store the value of the node, and `next` to point to the next node in the list.

```python
class Solution:
    def removeElements(self, head: Optional[ListNode], val: int) -> Optional[ListNode]:
        node = ListNode(next=head)
        prev, curr = node, head
```

- Here, we define a class `Solution` with a method `removeElements`. The method takes in the head of the linked list (`head`) and the value to be removed (`val`) as input parameters.
- A new node called `node` is created with its `next` pointing to the original `head` of the linked list. This is done to handle the edge case of removing the head node itself if it has the target value.
- Two pointers, `prev` and `curr`, are initialized. `prev` will be used to keep track of the previous node, and `curr` will traverse through the list.

```python
        while curr:
            nxt = curr.next
            if curr.val == val:
                prev.next = nxt
            else:
                prev = curr
            curr = nxt
```

- This is a loop that iterates through the linked list.
- `nxt` is assigned the reference to the next node of `curr`.
- If the value of the current node (`curr.val`) is equal to the target value (`val`), it means the current node needs to be removed. In this case, `prev.next` is updated to point to the next node (`nxt`), effectively skipping the current node.
- If the value of the current node is not equal to the target value, it means the node is not to be removed. In this case, `prev` is updated to `curr`, effectively moving `prev` forward in the list.

```python
        return node.next
```

- After the loop, the `node` points to the dummy node we created at the beginning. `node.next` points to the modified linked list without the nodes having the target value.
- So, we return `node.next`, which is the new head of the modified linked list.

This implementation correctly removes all nodes with the target value while maintaining the structure of the linked list. It does this by using two pointers (`prev` and `curr`) to adjust the `next` pointers of nodes that need to be removed.

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->

# QUESTION NO: 21. Merge Two Sorted Lists


1. **Class Definition (`ListNode`)**:
   - `class ListNode:` defines a simple class for creating linked list nodes.
   - The `__init__` method initializes each node with a value (`val`) and a reference to the next node (`next`). By default, if `val` or `next` is not provided, they are set to `0` and `None`, respectively.

2. **Class Definition (`Solution`)**:
   - `class Solution:` defines a class that contains the `mergeTwoLists` method to merge two sorted linked lists.
   - This class is structured to follow a common pattern for solving problems in LeetCode and other coding platforms.

3. **`mergeTwoLists` Method Parameters**:
   - `self`: The `self` parameter is a reference to the instance of the `Solution` class.
   - `list1: Optional[ListNode]` and `list2: Optional[ListNode]` are the two input linked lists to be merged. They are of type `Optional[ListNode]`, which means they can be either a valid linked list or `None`.

4. **Initialization**:
   - `dummy = ListNode()`: A `dummy` node is created to simplify the code. It acts as a placeholder at the beginning of the merged list.
   - `tail = dummy`: The `tail` pointer is initially set to the `dummy` node. It will be used to keep track of the last node in the merged list.

5. **Merging the Lists (While Loop)**:
   - The `while` loop iterates as long as both `list1` and `list2` are not `None`.
   - Inside the loop, it compares the values of the current nodes pointed to by `list1` and `list2`.
   - If `list1` has a smaller value, the node from `list1` is appended to the merged list (`tail.next = list1`), and `list1` is moved to its next node (`list1 = list1.next`).
   - If `list2` has a smaller or equal value, the node from `list2` is appended to the merged list (`tail.next = list2`), and `list2` is moved to its next node (`list2 = list2.next`).
   - In either case, the `tail` pointer is updated to the newly added node (`tail = tail.next`).

6. **Appending Remaining Nodes**:
   - After the loop, either `list1` or `list2` may still have remaining nodes. If `list1` is not `None`, the remaining nodes from `list1` are appended to the merged list.
   - If `list2` is not `None`, the remaining nodes from `list2` are appended to the merged list.

7. **Returning the Merged List**:
   - The merged list is returned as `dummy.next`. `dummy` was used to simplify the initial creation of the list, so `dummy.next` is the actual head of the merged list.

This code efficiently merges two sorted linked lists in a way that preserves the order of the elements while using a constant amount of extra space. It's a common technique used in various programming scenarios involving linked lists.

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->
# QUESTION NO: 2236. Root Equals Sum of Children

The Solution class contains a method named checkTree, which takes a TreeNode called root as an argument and returns a boolean (True or False).

1.Inside the checkTree method:

2.It compares the value of the current node (root.val) with the sum of values of its left and right children (root.left.val + root.right.val).
3.If these values are equal, it returns True, indicating that the condition holds for the current node.
4.If the values are not equal, it returns False, indicating that the condition does not hold for the current node.

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->
# QUESTION NO: 2236. Root Equals Sum of Children

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->

# QUESTION NO: 148. Sort List
<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->
# QUESTION NO: 1290. Convert Binary Number in a Linked List to Integer

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->
# QUESTION NO:19. Remove Nth Node From End of List

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->

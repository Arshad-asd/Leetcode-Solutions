                                                 QUESTION :- 844. Backspace String Compare


Given two strings s and t, return true if they are equal when both are typed into empty text editors. '#' means a backspace character.
Note that after backspacing an empty text, the text will continue empty.

Example 1:

Input: s = "ab#c", t = "ad#c"
Output: true
Explanation: Both s and t become "ac".

Example 2:
Input: s = "ab##", t = "c#d#"
Output: true
Explanation: Both s and t become "".

Example 3:
Input: s = "a#c", t = "b"
Output: false
Explanation: s becomes "c" while t becomes "b".

Class Definition:
We define a class named Solution to encapsulate the solution logic.

Method Definition:
The backspaceCompare method is defined within the Solution class. It takes two parameters, s and t, both of type str, and returns a boolean value (True or False).

Helper Function - process_string:
Inside the backspaceCompare method, we define a helper function called process_string. This function takes a string s and processes it to handle backspaces.

Stack for Simulating Backspaces:
Inside process_string, we create an empty list called stack. This list will act like a stack to help us process the characters while handling backspaces.

Loop Through Characters:
We loop through each character, char, in the input string s.

Processing Non-Backspace Characters:
If the current character char is not a backspace ('#'), we simply append it to the stack. This means that non-backspace characters are added to the stack as they are.

Handling Backspaces:
If the current character char is a backspace ('#'), we check if the stack is not empty. If the stack is not empty, we remove (pop) the last character from the stack. This simulates the effect of the backspace operation.

Returning Processed String:
After processing all characters in the input string, we return the processed string by joining the characters in the stack using join.

Comparison and Returning Result:
Finally, we compare the processed strings of both input strings s and t using the == operator. If the processed strings are equal, it means that both input strings are equivalent after backspace processing, and we return True. Otherwise, we return False.


If you want to reverse a string while keeping only the alphabetical characters in their original positions and ignoring special characters, you can achieve this using a combination of loops and conditionals. Here's how you can do it:

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->
                                                                 QUESTION :- 917. Reverse Only Letters


```python
def reverse_alphabet(input_string):
    alphabet_chars = [char for char in input_string if char.isalpha()]
    reversed_chars = []

    for char in input_string:
        if char.isalpha():
            reversed_chars.append(alphabet_chars.pop())
        else:
            reversed_chars.append(char)

    return ''.join(reversed_chars)

original_string = "H!el@lo, W#orld!"
reversed_string = reverse_alphabet(original_string)
print(reversed_string)  # Output: "d!lr@ow, W#olleH"
```

Here's how the code works:

1. `alphabet_chars = [char for char in input_string if char.isalpha()]`: This line creates a list `alphabet_chars` containing only the alphabetical characters from the `input_string`.

2. `reversed_chars = []`: This initializes an empty list `reversed_chars` where the characters of the reversed string will be stored.

3. The first loop (`for char in input_string:`) iterates through each character in the `input_string`.

4. `if char.isalpha():`: This conditional checks if the current character is alphabetical.

   - If it is, `alphabet_chars.pop()` removes the last character from the `alphabet_chars` list and adds it to the `reversed_chars` list.

   - If it's not, the current character is directly added to the `reversed_chars` list.

5. After the loop, the `reversed_chars` list holds the characters of the reversed string, while keeping only the alphabetical characters in their original positions.

6. `''.join(reversed_chars)` joins the characters in the `reversed_chars` list to form the final reversed string.

7. The function returns the final reversed string.

In the provided example, the input string `"H!el@lo, W#orld!"` is reversed while maintaining the positions of alphabetical characters. The special characters are not affected, and they remain in their original positions.

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->

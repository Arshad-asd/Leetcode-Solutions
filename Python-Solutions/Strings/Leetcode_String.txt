                                                 QUESTION :- 844. Backspace String Compare


Given two strings s and t, return true if they are equal when both are typed into empty text editors. '#' means a backspace character.
Note that after backspacing an empty text, the text will continue empty.

Example 1:

Input: s = "ab#c", t = "ad#c"
Output: true
Explanation: Both s and t become "ac".

Example 2:
Input: s = "ab##", t = "c#d#"
Output: true
Explanation: Both s and t become "".

Example 3:
Input: s = "a#c", t = "b"
Output: false
Explanation: s becomes "c" while t becomes "b".

Class Definition:
We define a class named Solution to encapsulate the solution logic.

Method Definition:
The backspaceCompare method is defined within the Solution class. It takes two parameters, s and t, both of type str, and returns a boolean value (True or False).

Helper Function - process_string:
Inside the backspaceCompare method, we define a helper function called process_string. This function takes a string s and processes it to handle backspaces.

Stack for Simulating Backspaces:
Inside process_string, we create an empty list called stack. This list will act like a stack to help us process the characters while handling backspaces.

Loop Through Characters:
We loop through each character, char, in the input string s.

Processing Non-Backspace Characters:
If the current character char is not a backspace ('#'), we simply append it to the stack. This means that non-backspace characters are added to the stack as they are.

Handling Backspaces:
If the current character char is a backspace ('#'), we check if the stack is not empty. If the stack is not empty, we remove (pop) the last character from the stack. This simulates the effect of the backspace operation.

Returning Processed String:
After processing all characters in the input string, we return the processed string by joining the characters in the stack using join.

Comparison and Returning Result:
Finally, we compare the processed strings of both input strings s and t using the == operator. If the processed strings are equal, it means that both input strings are equivalent after backspace processing, and we return True. Otherwise, we return False.


If you want to reverse a string while keeping only the alphabetical characters in their original positions and ignoring special characters, you can achieve this using a combination of loops and conditionals. Here's how you can do it:

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->
                                                                 QUESTION :- 917. Reverse Only Letters


```python
def reverse_alphabet(input_string):
    alphabet_chars = [char for char in input_string if char.isalpha()]
    reversed_chars = []

    for char in input_string:
        if char.isalpha():
            reversed_chars.append(alphabet_chars.pop())
        else:
            reversed_chars.append(char)

    return ''.join(reversed_chars)

original_string = "H!el@lo, W#orld!"
reversed_string = reverse_alphabet(original_string)
print(reversed_string)  # Output: "d!lr@ow, W#olleH"
```

Here's how the code works:

1. `alphabet_chars = [char for char in input_string if char.isalpha()]`: This line creates a list `alphabet_chars` containing only the alphabetical characters from the `input_string`.

2. `reversed_chars = []`: This initializes an empty list `reversed_chars` where the characters of the reversed string will be stored.

3. The first loop (`for char in input_string:`) iterates through each character in the `input_string`.

4. `if char.isalpha():`: This conditional checks if the current character is alphabetical.

   - If it is, `alphabet_chars.pop()` removes the last character from the `alphabet_chars` list and adds it to the `reversed_chars` list.

   - If it's not, the current character is directly added to the `reversed_chars` list.

5. After the loop, the `reversed_chars` list holds the characters of the reversed string, while keeping only the alphabetical characters in their original positions.

6. `''.join(reversed_chars)` joins the characters in the `reversed_chars` list to form the final reversed string.

7. The function returns the final reversed string.

In the provided example, the input string `"H!el@lo, W#orld!"` is reversed while maintaining the positions of alphabetical characters. The special characters are not affected, and they remain in their original positions.

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->


#QUESTION NUMBER : 2810. Faulty Keyboard
1. First declare class named solution and define a method called finalString passed parmeters self , s:str and return type a string
class Solution:
    def finalString(self, s: str) -> str:

2. declare a empty string called rev_str
rev_str = ""

3.The firstloop (for i in range(len(s)):) iterates through each character in the s string
for i in range(len(s)):

4.if s[i] == "i" : this conditional checks if the current character is if
  if it is not, the current string will add the rev_str variabele
 if s[i] == "i":
    rev_str = rev_str[:i][::-1]
else:
    rev_str += s[i]

5.After the loop the rev_str  will be return
  return rev_str

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->

#QUESTION NUMBER :  1185. Day of the Week

1. Imports: The code begins by importing two modules from Python's standard library: `datetime` and `calendar`. These modules are used for working with dates and calendars.

2. Class Definition: The code defines a class named `Solution`. This class likely contains a method for calculating the day of the week for a given date.

3. Method Definition: Inside the class, there is a method named `dayOfTheWeek`. This method takes three parameters:
   - `day`: An integer representing the day of the month.
   - `month`: An integer representing the month (1 for January, 2 for February, and so on).
   - `year`: An integer representing the year.

4. Date Formatting: The code initializes an empty string `date` to build a date string in the format "dd/mm/yyyy." It checks if the `day` and `month` are less than 10 (single-digit values) and, if so, adds a leading "0" to format them correctly.

```python
        return calendar.day_name[datetime.strptime(date, "%d/%m/%Y").weekday()]
```

5. Calculating the Day of the Week:
   - `datetime.strptime(date, "%d/%m/%Y")`: This line uses the `datetime.strptime` function to parse the `date` string into a datetime object. The format string `"%d/%m/%Y"` specifies the expected date format with day, month, and year.
   - `.weekday()`: Once the date is parsed, the `.weekday()` method is called on the datetime object to get the day of the week as an integer (0 for Monday, 1 for Tuesday, and so on).

6. Accessing the Day Name: Finally, the code uses the `calendar.day_name` list to access the name of the day corresponding to the integer obtained from `.weekday()`. This name is returned as the result of the `dayOfTheWeek` method.

In summary, this code takes a day, month, and year as input, formats them into a date string, converts the string to a datetime object, and then retrieves the day of the week for that date. It returns the name of the day of the week as a string.

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->

# Question NO : 2744. Find Maximum Number of String Pairs

1. `count = 0`: Initialize a variable `count` to keep track of the number of pairs of strings that meet a certain condition.

2. `for i in range(len(words)-1):`: This is the outer loop that iterates over the indices of the `words` list from 0 to the second-to-last element. It uses `i` as the loop variable.

3. `for j in range(i+1, len(words)):`: This is the inner loop that iterates over the indices of the `words` list from `i+1` to the last element. It uses `j` as the loop variable. The inner loop starts from `i+1` to avoid comparing a string with itself and to eliminate duplicate comparisons.

4. `if words[i] == words[j][::-1]:`: This line compares the string at index `i` with the string at index `j` reversed. The `[::-1]` slice notation is used to reverse the string at index `j`. If the two strings are equal, it means that the string at index `i` is the reverse of the string at index `j`.

5. If the condition in the `if` statement is true, it means that you have found a pair of strings where one is the reverse of the other. In this case, you increment the `count` variable by 1.

6. After both loops have finished iterating through all possible pairs of strings in the `words` list, the `count` variable contains the total number of pairs where one string is the reverse of the other.

7. Finally, the method returns the value of `count`, which represents the maximum number of such pairs of strings in the input list `words`.


<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->

#QUESTION NUMBER : 1332. Remove Palindromic Subsequences

### Method 1:

```python
class Solution:
    def removePalindromeSub(self, s: str) -> int:
       return 1 if s == s[::-1] else 2
```

Explanation:

- This method provides a concise solution to the problem.

- The `removePalindromeSub` function takes a string `s` as input.

- It checks whether the string `s` is a palindrome. A palindrome is a string that reads the same forwards and backwards.

- If `s` is a palindrome (i.e., it is the same as its reverse, which is `s[::-1]`), it returns 1. This means you can remove all characters in one step because the entire string is already a palindrome.

- If `s` is not a palindrome, it returns 2. This means you cannot make `s` a palindrome by removing characters, and it would take at least two removals.

### Method 2:

```python
class Solution:
    def removePalindromeSub(self, s: str) -> int:
        if not s: return 0
        l, r = 0, len(s) - 1
        while l < r:
            if s[l] != s[r]:
                return 2
            l += 1
            r -= 1
        return 1
```

Explanation:

- This method provides a more detailed approach to solving the problem.

- The `removePalindromeSub` function takes a string `s` as input.

- It first checks if the input string `s` is empty. If it's empty, it returns 0 because there are no characters to remove.

- Next, it initializes two pointers, `l` and `r`, to the start and end of the string, respectively.

- It enters a `while` loop that continues as long as `l` is less than `r`. In each iteration, it compares the characters at positions `l` and `r`.

- If the characters are not equal, it means that the string is not a palindrome. In this case, it returns 2 because you cannot make `s` a palindrome by removing characters.

- If the characters are equal, it moves the `l` pointer to the right (incrementing `l`) and the `r` pointer to the left (decrementing `r`) to check the next pair of characters.

- If the loop completes without finding any differing characters, it means that the entire string is a palindrome, and it returns 1. This means you can remove all characters in one step.

Both methods aim to determine whether the given string can be made into a palindrome by removing characters and return either 1 or 2 based on the result. Method 1 uses a concise approach, while Method 2 provides a more detailed and iterative solution.

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->

#QUESTION NUMBER : 2788. Split Strings by Separator

class Solution:
    def splitWordsBySeparator(self, words: List[str], separator: str) -> List[str]:
        ls = [] 
        for data in words:
            word = data.split(separator)
            for data in word:
                if(data != ""):
                    ls.append(data)
        return ls

1. initialize ls named empty list
2. iterate data named iterator thorugh words list useing forloop
3. then assign word temp variabele stored dat.split(Separator) it separate the "." contain string
4. inner loop start data named iterator used iterate in word string 
5. check if(data != "") then true append data to ls list
6.finaly rerturn ls list

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->

#QUESTION NUMBER :  2710. Remove Trailing Zeros From a String

class Solution:
    def removeTrailingZeros(self, num: str) -> str:
       while(num[-1] == '0'):
           num = num[:-1]
       return num

1.checking condition the last index vlaue equal to '0' then enter while loop
2.and assign new string in to num 
3.finaly return the updated string

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->

#QUESTION NUMBER : 1021. Remove Outermost Parentheses

1.initialize result list and count variabele with 0
2.first iterates the s string useing forloop
3.check the condition if i == '(' and count > 0: it means that the value of i equal to open Parentheses and count value grater than 0
4.check the condition if i == ')' and count > 1: it means that the value of i equal to closed Parentheses and count value grater than 1
5.if any condition true the res list append the current i value
6.finaly check the if conditon for increment the count value the Parentheses is open if open the counter in crease 1 other wise decrease 1
7.finaly return the join string with res list

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->

#QUESTION NUMBER : 1678. Goal Parser Interpretation
 class Solution:
    def interpret(self, command: str) -> str:
         command = command.replace("()","o")
         command = command.replace("(al)", "al")
         return command
 1. assign replaced strings into command string variabele () replace to o dnd (al) to al
 2.return command string

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->
 
 #QUESTION NUMBER : 1528. Shuffle String

 class Solution:
    def restoreString(self, s: str, indices: List[int]) -> str:
        res = ''
        for i in range(len(indices)):
           res += s[indices.index(i)]
        return res

1.intialize a empty string
2.for loop used to iteate the indices list
3.then add res string s[indiceis.index(i)] 
4.return res

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->

#QUESTION NUMBER : 1221. Split a String in Balanced Strings
class Solution:
    def balancedStringSplit(self, s: str) -> int:
       return list(accumulate(1 if c =='R' else -1 for c in s)).count(0)

1.set a flag to zero and loop through characters in string;
2.if char is R, add flag by 1; if char is L, subtract 1 from flag;
3.add 1 to counter whenever flag is 0.
4.One-line implementation utilizing accumulate function is below.
<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->

#QUESTION NUMBER : 1592. Rearrange Spaces Between Words


<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->
#QUESTION NUMBER : 2325. Decode the Message
1.intialize a dictionary named as dic and also intialize c = 97 for char code of alphabets
2.for loop used to iterate the key string length
3.condition check if key[i] not in dic: true add the c value based character to the dic[key[i]] = chr(c)
4.and increase the count of the c variable
4.intialize a empty string named as
5. for loop used to iteate the Message string
6.assign the corresponding index i value to the result string
7.final return the result string

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->
QUESTION NUMBER : 2160. Minimum Sum of Four Digit Number After Splitting Digits

class Solution:
    def minimumSum(self, num: int) -> int:
        nums = list(str(num))
        nums.sort()
        return int(nums[0] + nums[-1]) + int(nums[1] + nums[2])


1. Class Definition:
   - `class Solution:`: Defines a class named `Solution`.

2. Method Definition:
   - `def minimumSum(self, num: int) -> int:`: Defines a method named `minimumSum` within the `Solution` class. It takes an integer `num` as input and returns an integer.

3. Convert Integer to List of Digits:
   - `nums = list(str(num))`: Converts the input integer `num` to a list of its digits. The `str(num)` converts the integer to a string, and `list()` converts the string to a list of characters.

4. Sort the List:
   - `nums.sort()`: Sorts the list of digits in ascending order. After this line, `nums` will be a list of digits sorted from the smallest to the largest.

5. Calculate the Minimum Sum:
   - `return int(nums[0] + nums[-1]) + int(nums[1] + nums[2])`: Constructs two numbers from the sorted list of digits:
     - `int(nums[0] + nums[-1])`: Forms a number by concatenating the smallest and largest digits and converts it to an integer.
     - `int(nums[1] + nums[2])`: Forms a number by concatenating the second and third smallest digits and converts it to an integer.
     - Returns the sum of these two numbers.

Example:
Suppose `num = 456`. The code will execute as follows:

- Convert `456` to `['4', '5', '6']`.
- Sort the list to get `['4', '5', '6']`.
- Construct two numbers: `int('4' + '6')` and `int('5' + '6')`.
- Return the sum: `46 + 56 = 102`.


<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->

#QUESTION NUMBER : 1859. Sorting the Sentence


1. Split the input string into words.
2. Sort the words based on the numeric part.
3. Remove the numeric part from each word.
4. Join the sorted words into a new string.


def sort_and_remove_numbers(s):
    # Step 1: Split the string into words
    words = s.split()

    # Step 2: Sort the words based on the numeric part
    sorted_words = sorted(words, key=lambda x: int(''.join(filter(str.isdigit, x))))

    # Step 3: Remove the numeric part from each word
    words_without_numbers = [''.join(filter(str.isalpha, word)) for word in sorted_words]

    # Step 4: Join the sorted words into a new string
    result = ' '.join(words_without_numbers)

    return result
<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->
 
 #QUESTION NUMBER : 1844. Replace All Digits with Characters

1. **Initialization:**
   - `result = ''`: Initialize an empty string `result` to store the final result.

2. **Iterate Over Each Character:**
   - `for i in range(len(s)):`: Loop through each character in the input string `s` using the index `i`.

3. **Check if the Character is Numeric:**
   - `if s[i].isnumeric() == True:`: Check if the current character at index `i` is numeric.

4. **Replace Numeric Character:**
   - `result += chr(ord(s[i-1]) + int(s[i]))`: If the current character is numeric, replace it with the character that is `int(s[i])` positions ahead of the character at index `i-1`. Here's the breakdown:
      - `s[i-1]`: Get the character at the position immediately before the numeric character.
      - `ord(s[i-1])`: Get the ASCII code of the character.
      - `int(s[i])`: Convert the numeric character to an integer.
      - `chr(ord(s[i-1]) + int(s[i]))`: Add the integer value to the ASCII code and convert it back to a character.
      - The resulting character is added to the `result`.

5. **Keep Non-Numeric Characters Unchanged:**
   - `else:`: If the current character is not numeric, keep it unchanged.
   - `result += s[i]`: Append the current non-numeric character to the `result`.

6. **Return the Result:**
   - `return result`: Return the final result after processing all characters in the input string.

**Example:**
Suppose `s = "a1b2c3"`. The logic will execute as follows:
- `s[0]` is not numeric, so `'a'` is added to the result.
- `s[1]` is numeric (`'1'`), so `chr(ord(s[0]) + int(s[1]))` becomes `'a' + 1 = 'b'`, and `'b'` is added to the result.
- Similarly, `'b' + 2` becomes `'d'`, and `'c' + 3` becomes `'f'`.
- The final result is `'abc123'` replaced with `'abdf'`.

So, `Solution().replaceDigits("a1b2c3")` will return `'abdf'`.

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->
#QUESTION NUMBER  : 1812. Determine Color of a Chessboard Square

   1. Define Letters on the Chessboard:
        alpha is a list containing the letters 'a' to 'h', representing the columns on the chessboard.

   2. Iterate Over Combinations:
        Nested loops iterate over each letter and number combination on the chessboard.

   3. Check Coordinates Match:
        The code checks if the current combination matches the given coordinates.

   4. Check Color of the Square:
        If the combination matches, it checks if the sum of the letter index and number is even.
        If the sum is even, it returns True, indicating that the square is white.

   5. Return Result:
        If no match is found in the loops, it returns False, indicating that the square is black.


<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->

#QUESTION NUMBER  : 1374. Generate a String With Characters That Have Odd Counts

    1. The function generateTheString takes an integer n as input and returns a string.

    2.The conditional expression ("a" * n if n % 2 else "a" * (n-1) + "b") is used to determine the string to be returned based on whether n is even or odd.

        If n is odd (n % 2 is True), it returns the string consisting of the character 'a' repeated n times ("a" * n).

        If n is even (n % 2 is False), it returns the string consisting of the character 'a' repeated (n-1) times, followed by the character 'b' ("a" * (n-1) + "b").

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->
#QUESTION NUMBER  : 2000. Reverse Prefix of Word

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->
#QUESTION NUMBER  :1941. Check if All Characters Have Equal Number of Occurrences

Certainly! Let's break down each solution line by line.

### Method 1:
```python
class Solution:
    def areOccurrencesEqual(self, s: str) -> bool:
        sets = set()
        for i in range(len(s)):
            count = 0  
            for j in range(len(s)):
                if s[i] == s[j]:
                    count += 1
            sets.add(count)

        return True if len(sets) == 1 else False
```

1. `sets = set()`: Initializes an empty set to store the counts of characters.

2. `for i in range(len(s)):`: Outer loop iterating through each character in the string `s`.

3. `count = 0`: Initializes a counter for the current character.

4. `for j in range(len(s)):`: Inner loop iterating through each character in the string to count occurrences.

5. `if s[i] == s[j]:`: Checks if the current character in the outer loop matches the character in the inner loop.

6. `count += 1`: Increments the count if a match is found.

7. `sets.add(count)`: Adds the count to the set.

8. `return True if len(sets) == 1 else False`: Checks if there is only one unique count in the set. Returns `True` if all character occurrences are equal, otherwise `False`.

### Method 2:
```python
class Solution:
    def areOccurrencesEqual(self, s: str) -> bool:
        lst=[]
        for i in s:
            c=s.count(i)
            lst.append(c)
        if min(lst)==max(lst):
            return True
        else:
            return False
```

1. `lst=[]`: Initializes an empty list to store the counts of characters.

2. `for i in s:`: Iterates through each character in the string `s`.

3. `c=s.count(i)`: Counts the occurrences of the current character in the string.

4. `lst.append(c)`: Appends the count to the list.

5. `if min(lst)==max(lst):`: Checks if the minimum and maximum counts in the list are equal.

6. `return True`: Returns `True` if all character occurrences are equal.

7. `else: return False`: Returns `False` if the counts are not equal.

### Method 3:
```python
class Solution:
    def areOccurrencesEqual(self, s: str) -> bool:
        char_count = {}
        for char in s:
            char_count[char] = char_count.get(char, 0) + 1

        return len(set(char_count.values())) == 1
```

1. `char_count = {}`: Initializes an empty dictionary to store the counts of characters.

2. `for char in s:`: Iterates through each character in the string `s`.

3. `char_count[char] = char_count.get(char, 0) + 1`: Updates the count of the current character in the dictionary.

4. `return len(set(char_count.values())) == 1`: Checks if there is only one unique count in the dictionary values using a set. Returns `True` if all character occurrences are equal, otherwise `False`.

In summary, Method 3 is the most efficient and concise, avoiding redundant counting and nested loops.

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->

#QUESTION NUMBER  : 1309. Decrypt String from Alphabet to Integer Mapping

### Method 1:
```python
class Solution:
    def freqAlphabets(self, s: str) -> str:
        for i in range(26, 0, -1):
            s = s.replace(str(i) + "#", chr(ord("a") + i - 1)) if i > 9 else s.replace(str(i), chr(ord("a") + i - 1))
        return s
```

1. `for i in range(26, 0, -1):`: Iterates in reverse order from 26 to 1. This loop is used to replace each occurrence of a number or a number followed by '#' with the corresponding letter.

2. `s = s.replace(str(i) + "#", chr(ord("a") + i - 1)) if i > 9 else s.replace(str(i), chr(ord("a") + i - 1))`: Uses the `replace` method to substitute occurrences of the current number (or number followed by '#') with the corresponding letter. If the number is greater than 9, it appends '#' to it. The `if i > 9 else` part handles the case where the number is less than or equal to 9.

3. `return s`: Returns the modified string after replacing all occurrences.

### Method 2:
```python
class Solution:
    def freqAlphabets(self, s: str) -> str:
        ans = ""
        i = len(s) - 1
        while i >= 0:
            if s[i] == "#":
                ans = ans + chr(int(s[i - 2:i]) + 96)
                i = i - 2
            else:
                ans = ans + chr(int(s[i]) + 96)
            i -= 1
        return ans[::-1]
```

1. `ans = ""`: Initializes an empty string to store the result.

2. `i = len(s) - 1`: Initializes the index `i` to the last character of the input string `s`.

3. `while i >= 0:`: Initiates a loop that iterates through the string from right to left.

4. `if s[i] == "#":`: Checks if the current character is '#'.

5. `ans = ans + chr(int(s[i - 2:i]) + 96)`: Converts the substring (two characters before '#') to an integer, adds 96 to get the ASCII value of the corresponding letter, and appends the letter to the result string `ans`. The index `i` is then decremented by 2 to skip the processed characters.

6. `else: ans = ans + chr(int(s[i]) + 96)`: Converts the current character to an integer, adds 96 to get the ASCII value of the corresponding letter, and appends the letter to the result string `ans`.

7. `i -= 1`: Decrements the index `i` for the next iteration.

8. `return ans[::-1]`: Returns the reversed string `ans` since we processed the input string from right to left.

Both methods essentially perform the same task, converting encoded numbers to their corresponding letters, but they use different approaches to achieve this. Method 2 uses a while loop and directly processes each character, while Method 1 uses a for loop and the `replace` method to replace occurrences in a reverse order.


Certainly! Let's go through the code line by line:

```python
class Solution:
    def percentageLetter(self, s: str, letter: str) -> int:
```

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->

#QUESTION NUMBER  : 2278. Percentage of Letter in String

1. `class Solution:`: This defines a Python class named `Solution`.

2. `def percentageLetter(self, s: str, letter: str) -> int:`: This defines a method named `percentageLetter` within the class `Solution`. It takes two parameters, `s` (a string) and `letter` (a string), and it indicates that the method will return an integer.

```python
        count = s.count(letter)
```

3. `count = s.count(letter)`: This line calculates the number of occurrences of the specified `letter` in the string `s` using the `count` method of strings. It stores the count in the variable `count`.

```python
        percentage = (count / len(s)) * 100
```

4. `percentage = (count / len(s)) * 100`: This line calculates the percentage of occurrences of the specified `letter` in the string `s`. It divides the count of the letter by the length of the string `s` and then multiplies by 100 to get the percentage. The result is stored in the variable `percentage`.

```python
        return math.floor(percentage)
```

5. `return math.floor(percentage)`: This line returns the percentage as an integer, rounded down using `math.floor()`. The reason for rounding down is to get a whole number percentage without rounding up, ensuring that the result is always an integer.

In summary, the `percentageLetter` method calculates the percentage of occurrences of a specified letter in a given string and returns this percentage as an integer. It uses the count of the letter and the length of the string for the calculation, rounding down the result to ensure it's an integer.
<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->
#QUESTION NUMBER  : 2351. First Letter to Appear Twice

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->
#QUESTION NUMBER  : 1684. Count the Number of Consistent Strings

1.Loop through words: The function iterates through each word in the list of words.

2.Check each character: For each word, it uses the all(char in allowed for char in word) expression. This checks whether all characters in the word are present in the allowed string.

3.Increment count: If the condition is satisfied (i.e., all characters in the word are allowed), it increments the count.
<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->
#QUESTION NUMBER  : 2108. Find First Palindromic String in the Array


<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->
#QUESTION NUMBER  : 2185. Counting Words With a Given Prefix

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->

#QUESTION NUMBER :771. Jewels and Stones

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->
#QUESTION NUMBER : 1768. Merge Strings Alternately

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->
#QUESTION NUMBER : 1967. Number of Strings That Appear as Substrings in Word

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->

#QUESTION NUMBER : 1796. Second Largest Digit in a String
<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->
#QUESTION NUMBER : 557. Reverse Words in a String III
<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->
#QUESTION NUMBER : 2399. Check Distances Between Same Letters

step:1 unique = set(s): It creates a set containing unique characters from the input string s. This is done to iterate over each unique character in the string.

step-2: for letter in unique:: It iterates over each unique character in the set.

step-3:index = s.index(letter): It finds the index of the first occurrence of the current character letter in the string s.

step-4:dis = distance[ord(letter)-97]: It calculates the distance for the current character by converting the character to its ASCII code using ord() and subtracting 97 (the ASCII code for 'a'). This assumes that the characters in the string are lowercase English letters.

step-5:if index+dis+1 > len(s)-1 or s[index+dis+1] != letter:: It checks if the index plus the distance plus one is greater than or equal to the length of the string, or if the character at the position index + dis + 1 is not equal to the current character. If either of these conditions is true, it means the well-spaced condition is violated, and the method returns False.

step-6return True: If the loop completes without returning False, it means the string is well-spaced, and the method returns True.

Overall, this code checks the well-spacing condition for each unique character in the string based on the provided distances. If any character violates the condition, it returns False; otherwise, it returns True.


<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->

#QUESTION NUMBER : 1370. Increasing Decreasing String


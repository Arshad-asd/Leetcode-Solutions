                                                 QUESTION :- 844. Backspace String Compare


Given two strings s and t, return true if they are equal when both are typed into empty text editors. '#' means a backspace character.
Note that after backspacing an empty text, the text will continue empty.

Example 1:

Input: s = "ab#c", t = "ad#c"
Output: true
Explanation: Both s and t become "ac".

Example 2:
Input: s = "ab##", t = "c#d#"
Output: true
Explanation: Both s and t become "".

Example 3:
Input: s = "a#c", t = "b"
Output: false
Explanation: s becomes "c" while t becomes "b".

Class Definition:
We define a class named Solution to encapsulate the solution logic.

Method Definition:
The backspaceCompare method is defined within the Solution class. It takes two parameters, s and t, both of type str, and returns a boolean value (True or False).

Helper Function - process_string:
Inside the backspaceCompare method, we define a helper function called process_string. This function takes a string s and processes it to handle backspaces.

Stack for Simulating Backspaces:
Inside process_string, we create an empty list called stack. This list will act like a stack to help us process the characters while handling backspaces.

Loop Through Characters:
We loop through each character, char, in the input string s.

Processing Non-Backspace Characters:
If the current character char is not a backspace ('#'), we simply append it to the stack. This means that non-backspace characters are added to the stack as they are.

Handling Backspaces:
If the current character char is a backspace ('#'), we check if the stack is not empty. If the stack is not empty, we remove (pop) the last character from the stack. This simulates the effect of the backspace operation.

Returning Processed String:
After processing all characters in the input string, we return the processed string by joining the characters in the stack using join.

Comparison and Returning Result:
Finally, we compare the processed strings of both input strings s and t using the == operator. If the processed strings are equal, it means that both input strings are equivalent after backspace processing, and we return True. Otherwise, we return False.


If you want to reverse a string while keeping only the alphabetical characters in their original positions and ignoring special characters, you can achieve this using a combination of loops and conditionals. Here's how you can do it:

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->
                                                                 QUESTION :- 917. Reverse Only Letters


```python
def reverse_alphabet(input_string):
    alphabet_chars = [char for char in input_string if char.isalpha()]
    reversed_chars = []

    for char in input_string:
        if char.isalpha():
            reversed_chars.append(alphabet_chars.pop())
        else:
            reversed_chars.append(char)

    return ''.join(reversed_chars)

original_string = "H!el@lo, W#orld!"
reversed_string = reverse_alphabet(original_string)
print(reversed_string)  # Output: "d!lr@ow, W#olleH"
```

Here's how the code works:

1. `alphabet_chars = [char for char in input_string if char.isalpha()]`: This line creates a list `alphabet_chars` containing only the alphabetical characters from the `input_string`.

2. `reversed_chars = []`: This initializes an empty list `reversed_chars` where the characters of the reversed string will be stored.

3. The first loop (`for char in input_string:`) iterates through each character in the `input_string`.

4. `if char.isalpha():`: This conditional checks if the current character is alphabetical.

   - If it is, `alphabet_chars.pop()` removes the last character from the `alphabet_chars` list and adds it to the `reversed_chars` list.

   - If it's not, the current character is directly added to the `reversed_chars` list.

5. After the loop, the `reversed_chars` list holds the characters of the reversed string, while keeping only the alphabetical characters in their original positions.

6. `''.join(reversed_chars)` joins the characters in the `reversed_chars` list to form the final reversed string.

7. The function returns the final reversed string.

In the provided example, the input string `"H!el@lo, W#orld!"` is reversed while maintaining the positions of alphabetical characters. The special characters are not affected, and they remain in their original positions.

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->


#QUESTION NUMBER : 2810. Faulty Keyboard
1. First declare class named solution and define a method called finalString passed parmeters self , s:str and return type a string
class Solution:
    def finalString(self, s: str) -> str:

2. declare a empty string called rev_str
rev_str = ""

3.The firstloop (for i in range(len(s)):) iterates through each character in the s string
for i in range(len(s)):

4.if s[i] == "i" : this conditional checks if the current character is if
  if it is not, the current string will add the rev_str variabele
 if s[i] == "i":
    rev_str = rev_str[:i][::-1]
else:
    rev_str += s[i]

5.After the loop the rev_str  will be return
  return rev_str

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->

#QUESTION NUMBER :  1185. Day of the Week

1. **Imports**: The code begins by importing two modules from Python's standard library: `datetime` and `calendar`. These modules are used for working with dates and calendars.

2. **Class Definition**: The code defines a class named `Solution`. This class likely contains a method for calculating the day of the week for a given date.

3. **Method Definition**: Inside the class, there is a method named `dayOfTheWeek`. This method takes three parameters:
   - `day`: An integer representing the day of the month.
   - `month`: An integer representing the month (1 for January, 2 for February, and so on).
   - `year`: An integer representing the year.

4. **Date Formatting**: The code initializes an empty string `date` to build a date string in the format "dd/mm/yyyy." It checks if the `day` and `month` are less than 10 (single-digit values) and, if so, adds a leading "0" to format them correctly.

```python
        return calendar.day_name[datetime.strptime(date, "%d/%m/%Y").weekday()]
```

5. **Calculating the Day of the Week**:
   - `datetime.strptime(date, "%d/%m/%Y")`: This line uses the `datetime.strptime` function to parse the `date` string into a datetime object. The format string `"%d/%m/%Y"` specifies the expected date format with day, month, and year.
   - `.weekday()`: Once the date is parsed, the `.weekday()` method is called on the datetime object to get the day of the week as an integer (0 for Monday, 1 for Tuesday, and so on).

6. **Accessing the Day Name**: Finally, the code uses the `calendar.day_name` list to access the name of the day corresponding to the integer obtained from `.weekday()`. This name is returned as the result of the `dayOfTheWeek` method.

In summary, this code takes a day, month, and year as input, formats them into a date string, converts the string to a datetime object, and then retrieves the day of the week for that date. It returns the name of the day of the week as a string.

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->

# Question NO : 2744. Find Maximum Number of String Pairs

1. `count = 0`: Initialize a variable `count` to keep track of the number of pairs of strings that meet a certain condition.

2. `for i in range(len(words)-1):`: This is the outer loop that iterates over the indices of the `words` list from 0 to the second-to-last element. It uses `i` as the loop variable.

3. `for j in range(i+1, len(words)):`: This is the inner loop that iterates over the indices of the `words` list from `i+1` to the last element. It uses `j` as the loop variable. The inner loop starts from `i+1` to avoid comparing a string with itself and to eliminate duplicate comparisons.

4. `if words[i] == words[j][::-1]:`: This line compares the string at index `i` with the string at index `j` reversed. The `[::-1]` slice notation is used to reverse the string at index `j`. If the two strings are equal, it means that the string at index `i` is the reverse of the string at index `j`.

5. If the condition in the `if` statement is true, it means that you have found a pair of strings where one is the reverse of the other. In this case, you increment the `count` variable by 1.

6. After both loops have finished iterating through all possible pairs of strings in the `words` list, the `count` variable contains the total number of pairs where one string is the reverse of the other.

7. Finally, the method returns the value of `count`, which represents the maximum number of such pairs of strings in the input list `words`.


<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->

#QUESTION NUMBER : 1332. Remove Palindromic Subsequences

### Method 1:

```python
class Solution:
    def removePalindromeSub(self, s: str) -> int:
       return 1 if s == s[::-1] else 2
```

**Explanation**:

- This method provides a concise solution to the problem.

- The `removePalindromeSub` function takes a string `s` as input.

- It checks whether the string `s` is a palindrome. A palindrome is a string that reads the same forwards and backwards.

- If `s` is a palindrome (i.e., it is the same as its reverse, which is `s[::-1]`), it returns 1. This means you can remove all characters in one step because the entire string is already a palindrome.

- If `s` is not a palindrome, it returns 2. This means you cannot make `s` a palindrome by removing characters, and it would take at least two removals.

### Method 2:

```python
class Solution:
    def removePalindromeSub(self, s: str) -> int:
        if not s: return 0
        l, r = 0, len(s) - 1
        while l < r:
            if s[l] != s[r]:
                return 2
            l += 1
            r -= 1
        return 1
```

**Explanation**:

- This method provides a more detailed approach to solving the problem.

- The `removePalindromeSub` function takes a string `s` as input.

- It first checks if the input string `s` is empty. If it's empty, it returns 0 because there are no characters to remove.

- Next, it initializes two pointers, `l` and `r`, to the start and end of the string, respectively.

- It enters a `while` loop that continues as long as `l` is less than `r`. In each iteration, it compares the characters at positions `l` and `r`.

- If the characters are not equal, it means that the string is not a palindrome. In this case, it returns 2 because you cannot make `s` a palindrome by removing characters.

- If the characters are equal, it moves the `l` pointer to the right (incrementing `l`) and the `r` pointer to the left (decrementing `r`) to check the next pair of characters.

- If the loop completes without finding any differing characters, it means that the entire string is a palindrome, and it returns 1. This means you can remove all characters in one step.

Both methods aim to determine whether the given string can be made into a palindrome by removing characters and return either 1 or 2 based on the result. Method 1 uses a concise approach, while Method 2 provides a more detailed and iterative solution.

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->

#QUESTION NUMBER : 2788. Split Strings by Separator

class Solution:
    def splitWordsBySeparator(self, words: List[str], separator: str) -> List[str]:
        ls = [] 
        for data in words:
            word = data.split(separator)
            for data in word:
                if(data != ""):
                    ls.append(data)
        return ls

1. initialize ls named empty list
2. iterate data named iterator thorugh words list useing forloop
3. then assign word temp variabele stored dat.split(Separator) it separate the "." contain string
4. inner loop start data named iterator used iterate in word string 
5. check if(data != "") then true append data to ls list
6.finaly rerturn ls list

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->

#QUESTION NUMBER :  2710. Remove Trailing Zeros From a String

class Solution:
    def removeTrailingZeros(self, num: str) -> str:
       while(num[-1] == '0'):
           num = num[:-1]
       return num

1.checking condition the last index vlaue equal to '0' then enter while loop
2.and assign new string in to num 
3.finaly return the updated string

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->

#QUESTION NUMBER : 1021. Remove Outermost Parentheses

1.initialize result list and count variabele with 0
2.first iterates the s string useing forloop
3.check the condition if i == '(' and count > 0: it means that the value of i equal to open Parentheses and count value grater than 0
4.check the condition if i == ')' and count > 1: it means that the value of i equal to closed Parentheses and count value grater than 1
5.if any condition true the res list append the current i value
6.finaly check the if conditon for increment the count value the Parentheses is open if open the counter in crease 1 other wise decrease 1
7.finaly return the join string with res list

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->

#QUESTION NUMBER : 1678. Goal Parser Interpretation
 class Solution:
    def interpret(self, command: str) -> str:
         command = command.replace("()","o")
         command = command.replace("(al)", "al")
         return command
 1. assign replaced strings into command string variabele () replace to o dnd (al) to al
 2.return command string

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->
 
 #QUESTION NUMBER : 1528. Shuffle String

 class Solution:
    def restoreString(self, s: str, indices: List[int]) -> str:
        res = ''
        for i in range(len(indices)):
           res += s[indices.index(i)]
        return res

1.intialize a empty string
2.for loop used to iteate the indices list
3.then add res string s[indiceis.index(i)] 
4.return res

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->

#QUESTION NUMBER : 1221. Split a String in Balanced Strings
class Solution:
    def balancedStringSplit(self, s: str) -> int:
       return list(accumulate(1 if c =='R' else -1 for c in s)).count(0)

1.set a flag to zero and loop through characters in string;
2.if char is R, add flag by 1; if char is L, subtract 1 from flag;
3.add 1 to counter whenever flag is 0.
4.One-line implementation utilizing accumulate function is below.
<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->

#QUESTION NUMBER : 1592. Rearrange Spaces Between Words


<---------------------------------------------------------------------------------------------------------------------------------------------------------------------->
